NEW
AUTO

REM COPYRIGHT SCOTT ADAMS. 1978

REM converted to BBC BASIC in 2020

REM L% = screen width in chars
MODE7:VDU23,0,10,8;0;0;0;23,0,11,12;0;0;0;:PRINT:DIM S% 255:L%=40:*FX11,0

DIM arr 5,CT(8):CT=0:!arr=0:arr!2=0:cont=0:K=0:K$=STRING$(80,"*"):K$="":Z$="I'VE TOO MUCH TOO CARRY. TRY -TAKE INVENTORY-":PROC1240:*FX21,0

R=AR:CT(8)=LT:SF=0:INPUT"USE OLD 'SAVED' GAME? "K$
IFLEFT$(K$,1)="Y" INPUT"READY SAVED TAPE "K$:PRINT;IL*5 DIV60+1;" MINUTES":d=OPENIN("SAV"):INPUT#d,SF,R,CT:FORX=0TOIL:INPUT#d,IA(X):NEXT:FORX=0TO8:INPUT#d,CT(X):NEXT:FORX=0TO5:BGET#d,arr?X:NEXT:CLOSE#d
CLS:PRINT:PROC240:NV(0)=0:PROC360

REPEAT PROCb:INPUT"Tell me what to do? "TP$:PRINT:PROC170:IF F PRINT"YOU USE WORD(S) I DON'T KNOW":UNTIL0
PROC360:IF LT<0 ELSE IFIL<9 ELSE IFIA(9)=0 ELSE CT(8)=CT(8)-1:IFCT(8)=0 SF=SF OR 2^16:PRINT"LIGHT HAS RUN OUT"ELSEIFCT(8) IFCT(8)<25PRINT"LIGHT RUNS OUT IN ";CT(8);" TURN"CHR$(ASC("S")*-(CT(8)>1))"!"
NV(0)=0:PROC360:UNTIL0


REM *** Parse input ***

REM Split input into verb NT$(0) and noun NT$(1)
DEFPROC170:K=0:NT$(0)="":NT$(1)=""
FORX=1TOLEN(TP$):K$=MID$(TP$,X,1):IFK$=" " K=1 ELSE NT$(K)=LEFT$(NT$(K)+K$,ln)
NEXT
REM Assign verb to NV(0) and noun to NV(1)
FORX=0TO1:Z=0:NV(X)=0:IFNT$(X)=""Z=1 ELSE FORY=0TONL:K$=NV$(Y,X):IFLEFT$(K$,1)="*"K$=MID$(K$,2)
REM "Directional nouns" need truncating
IF Z ELSE IFX=1 IFY<7 K$=LEFT$(K$,ln)
REM Change any synonym to the base-word that it's a synonym of
IF Z ELSE IF NT$(X)=K$ NV(X)=Y:Y=NL:NEXT:NV(X)=NV(X)+1:REPEAT NV(X)=NV(X)-1:UNTIL LEFT$(NV$(NV(X),X),1)<>"*" ELSE NEXT
NEXT:F=NV(0)<1ORLEN(NT$(1))>0ANDNV(1)<1:ENDPROC

DEFPROC240:IF SF AND 2^15 IF IA(9)<>-1 AND IA(9)<>R PRINT"I CAN'T SEE, ITS TOO DARK.":ENDPROC
K=-1:IFLEFT$(RS$(R),1)="*"PROCo(MID$(RS$(R),2)+".")ELSEPROCo("I'm in a "+RS$(R)+".")
K$="":FORZ=0TOIL:IF K IF IA(Z)=R PRINT'"VISIBLE ITEMS HERE:":K=0
IF IA(Z)=R PROC280:K$=K$+TP$+". "
NEXT:PROCo(K$):IFPOS PRINT' ELSEPRINT
K=-1:FORZ=0TO5:IF K IFRM(R,Z)<>0PRINT"OBVIOUS EXITS: ";:K=0
IFRM(R,Z)<>0PRINTNV$(Z+1,1);" ";
NEXT:IFPOS PRINT':ENDPROC ELSE ENDPROC

REM Get human-readable object name
DEFPROC280:TP$=IA$(Z):IFRIGHT$(TP$,1)<>"/"ENDPROC ELSE FOR W=LEN(TP$)-1TO1 STEP-1:IFMID$(TP$,W,1)="/"TP$=LEFT$(TP$,W-1):W=1:NEXT:ENDPROC ELSE NEXT:STOP


REM *** Search for matching actions ***

REM Find a matching action

REM set up the success/failure flags
DEFPROC360:F2=-1:F=-1:F3=0

REM If GO {NSEWUD}
IFNV(0)=1 AND NV(1)<7 PROC610:ENDPROC

REM Debug: beep when processing of auto-actions begins
REM 363 IFNV(0)=0 V.7

REM Divide action data value by 150 to get verb-code V. If V=0 then this is an automatic action.
REM All automatic actions must precede all non-automatic actions.
REM365 FORX=-I%*(NV(0)<>0)TOCL:V=CA(X,0)DIV150:N=CA(X,0)-V*150
FORX=-I%*(NV(0)<>0)TOCL:V=CA(X,0)DIV150:N=CA(X,0)MOD150

REM If continue-flag set: if either V or N non-zero then return, else process conditions. 
IF cont IF V OR N cont=0:X=CL:NEXT:ENDPROC

REM If non-auto action is hit when processing auto actions then return.
IF cont ELSE IF NV(0)=0 IFV<>0 X=CL:NEXT:ENDPROC

REM If the parsed verb doesn't match V then NEXT action, else get this action's noun-code N.
IF cont ELSE IF NV(0)<>V NEXT:PROC990:ENDPROC

REM If auto action then if RND<=N then start processing conditions, else NEXT action.
IF cont ELSE IF NV(0)<>0 ELSE F=0:IF RND(100)>N NEXT:PROC990:ENDPROC

REM If non-auto action, and parsed noun doesn't match N, then NEXT action.
IF cont ELSE IF NV(0)=0 ELSE IF N<>NV(1) IF N<>0 NEXT:PROC990:ENDPROC


REM *** Process the conditions ***

REM                                         K=condition code, LL="number"
F2=-1:F=0:F3=-1:FORY=1TO5:W=CA(X,Y):LL=W DIV20:K=W MOD20:F1=-1
IFK>13EL.IF K=1PROC430 EL.IFK=2PROC450 EL.IFK=3PROC470 EL.IFK=4PROC490 EL.IFK=5PROC500 EL.IFK=6PROC510 EL.IFK=7PROC520 EL.IFK=8PROC530 EL.IFK=9PROC540 EL.IFK=10PROC410 EL.IFK=11PROC420 EL.IFK=12PROC440 EL.IFK=13PROC460
IFK<14EL.IFK=14PROC480 EL.IFK=15PROC542 EL.IFK=16PROC543 EL.IFK=17PROC546 EL.IFK=18PROC547 EL.IFK=19PROC544
F2=F2 AND F1:IF F2 NEXT ELSE Y=5:NEXT,:PROC990:ENDPROC


REM *** Process the commands ***

IP=0:FOR Y=1TO4:K=(Y-1)DIV2+6:IF Y=1 OR Y=3 A=CA(X,K)DIV150 ELSE A=CA(X,K)MOD150
IF A<52 IF A PROCp(MS$(A))
IFA>64EL.IFA=52PROC660 EL.IFA=53PROC700 EL.IFA=54PROC740 EL.IFA=55PROC760 EL.IFA=56PROC770 EL.IFA=57PROC780 EL.IFA=58PROC790 EL.IFA=59PROC760 EL.IFA=60PROC810 EL.IFA=61PROC830 EL.IFA=62PROC840 EL.IFA=63PROC850 EL.IFA=64PROC860
IFA<65EL.IFA>76EL.IFA=65PROC870 EL.IFA=66PROC890 EL.IFA=67PROC920 EL.IFA=68PROC930 EL.IFA=69PROC940 EL.IFA=70PROC950 EL.IFA=71PROC710 EL.IFA=72PROC750 EL.IFA=73PROC955 EL.IFA=74PROC692 EL.IFA=75PROC842 EL.IFA=76PROC860
IFA<77EL.IFA>88EL.IFA=77PROC942 EL.IFA=78PROC943 EL.IFA=79PROC944 EL.IFA=80PROC742 EL.IFA=81PROC945 EL.IFA=82PROC946 EL.IFA=83PROC947 EL.IFA=84PROC951 EL.IFA=85PROC952 EL.IFA=86PROC953 EL.IFA=87PROC743 EL.IFA=88PROC745
IF A>101 PROCp(MS$(A-50))

REM Next command - NEXT Y
NEXT

REM Stop processing non-automatic and non-continued actions
IF NV(0)<>0 AND NOT cont X=CL:NEXT:PROC990:ENDPROC

REM Next automatic or continued action - NEXT X
NEXT:PROC990:ENDPROC

DEFPROC990
IFNV(0)=0 OR cont cont=0:ENDPROC
REM            10=GET,       18=DROP
IF NV(0)<>10 AND NV(0)<>18 OR F3 ELSE PROC1060
IF F PRINT"I DON'T UNDERSTAND YOUR COMMAND":ENDPROC
IF NOT F2 PRINT"I CAN'T DO THAT YET"
ENDPROC

REM Return from action-matching routine
REM1040 RETURN

REM Get param from condition list
DEFPROC1050:REP.IP=IP+1:W=CA(X,IP):P=W DIV20:M=W MOD20:U.M=0:ENDPROC


REM *** Automatically GET or DROP ***

REM 10=GET, 18=DROP
DEFPROC1060
IF NV(1)=0 PRINT"WHAT?":F=0:ENDPROC
IF NV(0)<>10 ELSE L=0:FORZ=0TOIL:L=L-(IA(Z)=-1):NEXT:IF MX>=0 IF L>=MX PRINTZ$:F=0:ENDPROC
K=0:FOR X=0TOIL:$S%=IA$(X):IF S%?(LEN$S%-1)<>47 NEXT:PROC1200:ENDPROC ELSE LL=LEN$S%-2:FORY=LL TO1 STEP-1:IF S%?Y<>47 NEXT,:PROC1200:ENDPROC ELSE Z=Y:Y=1:NEXT:Y=Z
S%?(LEN$S%-1)=&D
IF$(S%+Y+1)<>NV$(NV(1),1)NEXT:PROC1200:ENDPROC
IFNV(0)=10 ELSE IFIA(X)<>-1 K=1:NEXT:PROC1200:ENDPROC ELSE IA(X)=R:K=3
IFNV(0)<>10 ELSE IFIA(X)<>R K=2:NEXT:PROC1200:ENDPROC ELSE IA(X)=-1:K=3
PRINT"OK, ";:X=IL:NEXT
F=0:ENDPROC
DEFPROC1200:IF K=1 PRINT"I'M NOT CARRYING IT" ELSE IFK=2 PRINT"I DON'T SEE IT HERE"
IF K=0 IF NOT F3 PRINT"ITS BEYOND MY POWER TO DO THAT":F=0
IF K<>0 F=0
ENDPROC



REM *** Load game init data ***

DEFPROC1240:INPUT"READY DATA TAPE. HIT ENTER "K$
d=OPENIN("DAT")
INPUT#d,IL,CL,NL,RL,MX,AR,TT,ln,LT,ML,TR
REM 1260 W=INT((IL+INT(CL/2)+INT(NL/10)+RL+ML)/12):REM PRINTW+1;"MINUTES TO LOAD."
DIMNV(1),CA(CL,7),NV$(NL,1),IA$(IL),IA(IL),RS$(RL),RM(RL,5),MS$(ML),NT$(1),I2(IL)
FORX=0TOCL:INPUT#d,CA(X,0),CA(X,1),CA(X,2),CA(X,3),CA(X,4),CA(X,5),CA(X,6),CA(X,7):NEXT
INPUT#d,I%
FORX=0TONL:FORY=0TO1:INPUT#d,NV$(X,Y)
NEXT,
FORX=0TORL:INPUT#d,RM(X,0),RM(X,1),RM(X,2),RM(X,3),RM(X,4),RM(X,5),RS$(X):NEXT
FORX=0TOML:INPUT#d,MS$(X):NEXT
FORX=0TOIL:INPUT#d,IA$(X),IA(X):I2(X)=IA(X):NEXT:CLOSE#d:ENDPROC
REM



REM *** Word-wrap, etc. ***

DEFPROCo($S%):LOCALA%,Z%,C%,N%,T%:N%=LEN$S%:A%=0:Z%=L%+1-POS:REPEATIFZ%>N%Z%=N%ELSEREPEATZ%=Z%-1:C%=S%?Z%:UNTILC%=32:IFZ%<A%Z%=A%+L%
T%=S%?Z%:S%?Z%=13:PRINT$(S%+A%);:S%?Z%=T%:VDU32,-8*(POS=1):IFZ%-A%<=L%ANDPOS PRINTELSEIFC%=32A%=A%+1ELSEZ%=Z%-1
A%=Z%+1:Z%=A%+L%+1:UNTILA%>=N%:IFPOS PRINT:ENDPROC ELSEENDPROC

REM Backtrack to previous non-space char 
DEFPROCj:LOCALA%,C%:A%=&87:REPEATVDU8:C%=(USR(&FFF4)AND&FF00)DIV256:UNTILC%<>32:VDU9:ENDPROC

REM Is the previous line blank?
DEFFNb:LOCALA%,C%,I%:VDU11,8:A%=&87:FORI%=1TOL%:VDU9:C%=(USR(&FFF4)AND&FF00)DIV256:IFC%=32NEXT:VDU10,13:=TRUE ELSEI%=L%:NEXT:VDU10,13:=FALSE
REM If at start of line, then print a blank line if prev line isn't blank.
DEFPROCb:IFPOS ENDPROC ELSE IFNOT(FNb)PRINT:ENDPROC ELSEENDPROC

REM Now PROCp is only for printing messages
DEFPROCp($S%):P.$S%:END.



REM *** Condition handlers ***

REM 10. ANY. Is player carrying anything at all?
DEFPROC410:F1=-1:FORZ=0TOIL:IFIA(Z)=-1 Z=IL:NEXT:ENDPROC ELSENEXT:F1=0:ENDPROC

REM 11. -ANY. Is player carrying nothing?
DEFPROC420:F1=0:FORZ=0TOIL:IFIA(Z)=-1 Z=IL:NEXT:ENDPROC ELSENEXT:F1=-1:ENDPROC

REM 1. HAS. Is player carrying object LL?
DEFPROC430:F1=IA(LL)=-1:ENDPROC

REM 12. -AVL. Is obj LL not being carried by player and not in current room?
DEFPROC440:F1=IA(LL)<>-1 AND IA(LL)<>R:ENDPROC

REM 2. IN/W. Is player in room with object LL?
DEFPROC450:F1=IA(LL)=R:ENDPROC

REM 13. -RM0. Is obj LL not in the storeroom (room zero)?
DEFPROC460:F1=IA(LL)<>0:ENDPROC

REM 3. AVL. Is player in room with obj LL or carrying it?
DEFPROC470:F1=IA(LL)=R OR IA(LL)=-1:ENDPROC

REM 14. RM0. Is obj LL in storeroom (room zero)?
DEFPROC480:F1=IA(LL)=0:ENDPROC

REM 4. IN. Is player in room LL?
DEFPROC490:F1=R=LL:ENDPROC

REM 5. -IN/W. Is player carrying obj LL, or obj LL isn't in current room?
DEFPROC500:F1=IA(LL)<>R:ENDPROC

REM 6. -HAVE. Is player not carrying obj LL?
DEFPROC510:F1=IA(LL)<>-1:ENDPROC

REM 7. -IN. Is player not in room LL?
DEFPROC520:F1=R<>LL:ENDPROC

REM 8. BIT. Is numbered flag-bit set?
DEFPROC530:F1=SF AND 2^LL:F1=F1<>0:ENDPROC

REM 9. -BIT. Is numbered flag-bit clear?
DEFPROC540:F1=SF AND 2^LL:F1=F1=0:ENDPROC

REM 15. CT<=
DEFPROC542:F1=CT<=LL:ENDPROC

REM 16. CT>
DEFPROC543:F1=CT>LL:ENDPROC

REM 19. CT=
DEFPROC544:F1=CT=LL:ENDPROC

REM 17. ORIG
DEFPROC546:F1=IA(LL)=I2(LL):ENDPROC

REM 18 -ORIG
DEFPROC547:F1=IA(LL)<>I2(LL):ENDPROC



REM *** Command handlers ***

REM Movement
DEFPROC610:L=(SF AND 2^15)>0:IFL L=L AND IA(9)<>R AND IA(9)<>-1:IF L PRINT"DANGEROUS TO MOVE IN THE DARK!"
IFNV(1)<1PRINT"GIVE ME A DIRECTION TOO.":ENDPROC
K=RM(R,NV(1)-1):IFK>=1 ELSE IFL PRINT"I FELL DOWN AND BROKE MY NECK.":K=RL:SF=SF AND NOT (2^15) ELSE PRINT"I CAN'T GO IN THAT DIRECTION":ENDPROC
IF NOT L PROC950
R=K:PROC240:ENDPROC

REM 52. GETx
DEFPROC660:L=0:FORZ=0TOIL:IFIA(Z)=-1 L=L+1
NEXT
IF MX>=0 IF L>=MX PRINT Z$:Y=4:ENDPROC
PROC1050:IA(P)=-1:ENDPROC

REM 74. AGETx
DEFPROC692:PROC1050:IA(P)=-1:ENDPROC

REM 53. DROPx
DEFPROC700:PROC1050:IA(P)=R:ENDPROC

REM 71. SAVE
DEFPROC710:PRINT"SAVING GAME":INPUT"READY OUTPUT TAPE "K$:PRINT;(IL*5DIV60)+1;" MINUTES"
d=OPENOUT("SAV"):PRINT#d,SF,R,CT:FORW=0TOIL:PRINT#d,IA(W):NEXT:FORW=0TO8:PRINT#d,CT(W):NEXT:FORX=0TO5:BPUT#d,arr?X:NEXT:CLOSE#d
ENDPROC

REM 54. GOTOy
DEFPROC740:PROC1050:R=P:ENDPROC

REM 80. EXRM0
DEFPROC742:Z=R:R=?arr:?arr=Z:ENDPROC

REM 87. EXC,CR
DEFPROC743:PROC1050:Z=R:R=arr?P:arr?P=Z:ENDPROC

REM 88. DELAY
DEFPROC745:TIME=0:REP.U.TIME>100:ENDPROC

REM 72. EXx,x (Exchange the room locations of the Par #1 object and the Par #2 object)
DEFPROC750:PROC1050:L=P:PROC1050:Z=IA(P):IA(P)=IA(L):IA(L)=Z:ENDPROC

REM 55/59. x->RM0
DEFPROC760:PROC1050:IA(P)=0:ENDPROC

REM 56. NIGHT
DEFPROC770:SF=SF OR 2^15:ENDPROC

REM 57. DAY
DEFPROC780:SF=SF AND NOT (2^15):ENDPROC

REM 58. SETz
DEFPROC790:PROC1050
DEFPROC790a:*
SF=SF OR 2^P:ENDPROC

REM 60. CLRz
DEFPROC810:PROC1050
DEFPROC810a:*
SF=SF AND NOT (2^P):ENDPROC

REM 61. DEAD
DEFPROC830:PRINT"I'M DEAD...":R=RL:SF=SF AND NOT (2^15):PROC860:ENDPROC

REM 62. x->y (Move the Par #1 object to the Par #2 room)
DEFPROC840:PROC1050:L=P:PROC1050:IA(L)=P:ENDPROC

REM 75. BYx->x (Put Par #1 object in same room as Par #2 object)
DEFPROC842:PROC1050:L=P:PROC1050:Z=IA(L):IA(L)=IA(P):IFIA(L)=R ORZ=R IFZ<>IA(L) PROC860:ENDPROC EL.ENDPROC

REM 63. FINI
DEFPROC850:INPUT"THE GAME IS NOW OVER"'"ANOTHER GAME? "K$:IFLEFT$(K$,1)="N"END ELSE RUN

REM 64. DspRM
DEFPROC860:PROC240:ENDPROC

REM 65. SCORE
DEFPROC870:L=0:FORZ=0TOIL:IFIA(Z)=TR IFLEFT$(IA$(Z),1)="*" L=L+1
NEXT:PRINT"I'VE STORED ";L;" TREASURES."'"ON A SCALE OF 0 TO 100 THAT RATES A ";L DIV TT*100:IFL=TT PRINT"WELL DONE.":PROC850 EL.ENDPROC

REM 66. INV
DEFPROC890:PRINT"I'M CARRYING:":K$="":FORZ=0TOIL:IFIA(Z)=-1 PROC280:K$=K$+TP$+". "
NEXT:IFK$=""PRINT"Nothing"ELSEPROCo(K$)
IFPOS PRINT':ENDPROC ELSEPRINT:ENDPROC

REM 67. SET0 (Sets the flag-bit numbered 0)
DEFPROC920:P=0:PROC790a:ENDPROC

REM 68. CLR0 (Clears the flag-bit numbered 0)
DEFPROC930:P=0:PROC810a:ENDPROC

REM 69. FILL (Re-fill the artificial light source (obj 9) and pick it up)
DEFPROC940:SF=SF AND NOT (2^16):CT(8)=LT:IA(9)=-1:ENDPROC

REM 77. CT-1
DEFPROC942:CT=CT-1:ENDPROC

REM 78. DSPCT
DEFPROC943:PRINT;CT;:ENDPROC

REM 79. CT<-N
DEFPROC944:PROC1050:CT=P:ENDPROC

REM 81. EXM,CT
DEFPROC945:PROC1050:Z=CT(P):CT(P)=CT:CT=Z:ENDPROC

REM 82. CT+N
DEFPROC946:PROC1050:CT=CT+P:ENDPROC

REM 83. CT-N
DEFPROC947:PROC1050:CT=CT-P:ENDPROC

REM 70. CLS
DEFPROC950:CLS:PRINT:ENDPROC

REM 84. SAYW
DEFPROC951:PRINT NT$(1);:ENDPROC

REM 85. SAYWCR
DEFPROC952:PRINT NT$(1):ENDPROC

REM 86. SAYCR
DEFPROC953:PRINT:ENDPROC

REM 73. CONT
DEFPROC955:cont=-1:ENDPROC
